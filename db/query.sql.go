// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, status)
VALUES ($1, $2, $3)
RETURNING id, title, description, status, created_at
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
	Status      string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (DMTask, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Title, arg.Description, arg.Status)
	var i DMTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, status, created_at
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id uuid.UUID) (DMTask, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i DMTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getTasksFiltered = `-- name: GetTasksFiltered :many
SELECT id, title, description, status, created_at
FROM tasks
WHERE (cardinality(COALESCE($1::uuid[], '{}')) = 0 OR id = ANY($1::uuid[]))
  AND (cardinality(COALESCE($2::task_status[], '{}')) = 0 OR status = ANY($2::task_status[]))
ORDER BY created_at
LIMIT $3 OFFSET $4
`

type GetTasksFilteredParams struct {
	Column1 []uuid.UUID
	Column2 []string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetTasksFiltered(ctx context.Context, arg GetTasksFilteredParams) ([]DMTask, error) {
	rows, err := q.db.Query(ctx, getTasksFiltered,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DMTask
	for rows.Next() {
		var i DMTask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksFilteredCount = `-- name: GetTasksFilteredCount :one
SELECT COUNT(*)
FROM tasks
WHERE (cardinality(COALESCE($1::uuid[], '{}')) = 0 OR id = ANY($1::uuid[]))
  AND (cardinality(COALESCE($2::task_status[], '{}')) = 0 OR status = ANY($2::task_status[]))
`

type GetTasksFilteredCountParams struct {
	Column1 []uuid.UUID
	Column2 []string
}

func (q *Queries) GetTasksFilteredCount(ctx context.Context, arg GetTasksFilteredCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getTasksFilteredCount, arg.Column1, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
  title = COALESCE($1, title),
  description = COALESCE($2, description),
  status = COALESCE($3, status)
WHERE id = $4
RETURNING id, title, description, status, created_at
`

type UpdateTaskParams struct {
	Title       pgtype.Text
	Description pgtype.Text
	Status      *string
	ID          uuid.UUID
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (DMTask, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	var i DMTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
